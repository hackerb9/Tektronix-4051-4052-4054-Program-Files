;	6.0 MINIBUG REV.4 PROGRAM - Modified for Tektronix 4052A/4054A ;   Modified from pdf source by Monty McGraw - Oct 6 2018;;     from LISTING in MikbugEN100.pdf at;     http://www.swtpc.com/mholley/MP_A/MIKBUG_Index.htm;	NAM MINIB; 	MINI-BUG; 	COPYWRITE 1973, MOTOROLA IMC; 	REV 004 (USED WITH MIKBUG);;   location of Motorola ACIA hardware in Tektronix 4052/4054ACIACS= 0FF44	;ACIA CONTROL/STATUS (FF44)ACIADA= 0FF45	;					 (FF45);;   Reworked source for Tektronix 4052A or 4054A to be loaded;   with CALL "EXEC",Code$,Rel$ where first E in EXEC is Control-E;	and Code$ is 8-bit binary and Rel$ contains CHR(20)&CHR(0);;	The BINARY program must be loaded at 2000 or reassemble with new ORG;   I used A09 assembler V1.37 with these directives:;   a09.exe -Bmini.bin -Fmini.f -Smini.srec -Lmini.lst -OM00 mini.src;  ;		ORG		$2000BEGIN:	JMP 	START	; JUMP TO START CODE; INPUT ONE CHAR INTO A-REGISTERINCH:  	LDAA	ACIACS		ASRA		BCC		INCH 	; RECEIVE NOT READY		LDAA	ACIADA 	; INPUT CHARACTER		ANDA	7F,i    ; RESET PARITY BIT		CMPA	7F,i		BEQ		INCH	; RUBOUT - IGNORE		JMP 	OUTCH	; ECHO CHAR; INPUT HEX CHARINHEX:  BSR 	INCH		CMPA 	30,i		BMI		C1		; NOT HEX		CMPA	39,i		BLE		IN1HG		CMPA	41,i		BMI		C1		; NOT HEX		CMPA	46,i		BGT 	C1		; NOT HEX		SUBA	07,iIN1HG:  RTSLOAD:   LDAA	0D1,i   ; TURN READER ON		;STA A	ACIACS	; DON'T CHANGE THE CS REG		NOP				; REPLACE WITH THREE NOPs		NOP		NOP		LDAA	00,i      ; use NULL instead		BSR		OUTCHLOAD3:  BSR 	INCH		CMPA 	53,i		BNE 	LOAD3 	; 1ST CHAR NOT (S)		BSR 	INCH 	; READ CHAR		CMPA 	39,i		BEQ 	LOAD21		CMPA 	31,i		BNE		LOAD3	; 2ND CHAR NOT (1)		CLR		CKSM	; ZERO CHECKSUM		BSR		BYTE	; READ BYTE		SUBA	02,i		STAA	BYTECT	; BYTE COUNT; BUILD ADDRESS		BSR		BADDRLOAD11: BSR		BYTE		DEC		BYTECT		BEQ		LOAD15	; ZERO BYTE COUNT		STAA 0,x		INX		BRA		LOAD11LOAD15: INC		CKSM		BEQ		LOAD3LOAD19: LDAA	3F,i    ; PRINT QUESTION MARK		BSR		OUTCHLOAD21: LDAA	0B1,i   ; TURN READER OFF	   ;STAA	ACIACS  ; DON'T CHANGE THE CS REG	    NOP				; REPLACE WITH NOPs	    NOP	    NOP	    LDAA	00,i    ; use NULL instead	    BSR		OUTCHC1:     JMP		CONTRL; BUILD ADDRESSBADDR:  BSR		BYTE	; READ 2 FRAMES		STAA    XHI		BSR		BYTE		STAA    XLOW		LDX		XHI		; (X) ADDRESS WE BUILT		RTS; INPUT BYTE (TWO FRAMES)BYTE:   BSR		INHEX	; GET HEX CHAR		ASLA		ASLA		ASLA		ASLA		TAB		BSR		INHEX		ANDA	0F,i    ; MASK TO 4 BITS		ABA		TAB		ADDB	CKSM		STAB	CKSM		RTS;CHANGE MEMORY (M AAAA DD NN)CHANGE: BSR		BADDR	; BUILD ADDRESS		BSR		OUTS	; PRINT SPACE		BSR		OUT2HS		BSR		BYTE		DEX		STAA 0,x		CMPA 0,x		BNE 	LOAD19	; MEMORY DID NOT CHANGE		BRA		CONTRLOUTHL:  LSRA			; OUT HEX LEFT BCD DIGIT		LSRA		LSRA		LSRAOUTHR:  ANDA	0F,i    ; OUT HEX RIGHT BCD DIGIT		ADDA	30,i		CMPA	39,i		BLS		OUTCH		ADDA	07,i		; OUTPUT ONE CHAROUTCH:  PSHB			; SAVE B-REGOUTC1:  LDAB	ACIACS		ASRB		ASRB		BCC		OUTC1	; XMIT NOT READY		STAA	ACIADA	; OUTPUT CHARACTER		PULB		 	; RESTORE B-REG		RTSOUT2H:  LDAA 0,x        ; OUTPUT 2 HEX CHAR		BSR		OUTHL	; OUT LEFT HEX CHAR		LDAA 0,x		BSR		OUTHR	; OUT RIGHT HEX CHAR		INX		RTSOUT2HS: BSR		OUT2H	; OUTPUT 2 HEX CHAR + SPACEOUTS:   LDAA	20,i    ; SPACE		BRA		OUTCH	; (BSR & RTS); PRINT CONTENTS OF STACK.PRINT:  TSX		STX		SP		; SAVE STACK POINTER		LDAB	09,iPRINT2: BSR		OUT2HS	; OUT 2 HEX & SPACE		DECB		BNE PRINT2; ENTER POWER ON SEQUENCE; INZ ACIASTART:  LDAA	0B1	    ; DON'T CHANGE UART PARAMETERS;		STAA	ACIACS	; REPLACE WITH THREE NOPs		NOP				; REPLACE WITH THREE NOPs		NOP		NOPCONTRL: LDS		STACK	; SET STACK POINTER		LDAA	0D,i	; CARRIAGE RETURN		BSR		OUTCH		LDAA	3E,i	; ADD > FOR PROMPT insead of LF		BSR		OUTCH		JSR		INCH	; READ CHARACTER		TAB		BSR		OUTS	; PRINT SPACE		CMPB	4C,i		BNE		TSTCNG		JMP		LOADTSTCNG:	CMPB	4D,i		BEQ		CHANGE		CMPB	50,i		BEQ		PRINT	; STACK		CMPB	51,i    ; ADD Q TO RETURN TO BASIC		BEQ		RETURN  ; to basic pgm after CALL EXEC		CMPB	47,i		BNE		CONTRL		RTI		        ; GORETURN: RTS;; put NOPs AND LABELS TO MAKE STACK AT END OF PROGRAM INSTEAD OF ABSOLUTE; RESERVE 40 (DECIMAL) BYTES BEFORE STACK		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOPSTACK:	NOP ; STACK POINTER; REGISTERS FOR GO		NOP	; CONDITION CODES		NOP	; B ACCUMULATOR		NOP	; A		NOP	; X-HIGH		NOP	; X-LOW		NOP	; P-HIGH		NOP	; P-LOWSP:		NOP ; S-HIGH		NOP	; S-LOW; END REGISTERS FOR GOCKSM:	NOP	; CHECKSUMBYTECT:	NOP ; BYTE COUNTXHI:	NOP	; X-HIGHXLOW:	NOP	; X-LOW;;