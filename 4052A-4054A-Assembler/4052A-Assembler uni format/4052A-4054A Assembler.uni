1 REM assembler for EXEC w/disk capability -- 7/21/822 GO TO 2004 PRINT "*** loading TECO ***"5 OLD "teco"8 PRINT "executing code..."9 CALL "E_xec",Code$,Rel$10 PRINT "done"11 RETURN 20 DIM Zz$(1000)21 Zz$=""22 FOR I=1 TO LEN(Code$)23    CALL Hex(ASC(Code$,I),2;Zz$)24 NEXT I25 PRINT Zz$26 RETURN 40 PRINT "saving file ""ASSEM"""41 SAVE "ASSEM"42 PRINT "done"43 RETURN 80 RENUMBER 80,2,8082 RENUMBER 200,10,20084 RENUMBER 1000,10,100086 RENUMBER 2000,10,200088 RENUMBER 3000,10,300090 RENUMBER 4000,10,400092 RENUMBER 5000,10,500094 RENUMBER 10000,10,1000096 RENUMBER 11000,10,1100098 RENUMBER 12000,10,12000100 RENUMBER 13000,10,13000102 RENUMBER 14000,10,14000104 RENUMBER 15000,10,15000106 RENUMBER 16000,10,16000108 RENUMBER 17000,10,17000110 RENUMBER 18000,10,18000112 RENUMBER 19000,10,19000114 RENUMBER 20000,10,20000116 PRINT "*** renumbered ***"118 RETURN 200 REM initialize210 INIT 220 CALL _init230 DIM Line_in$(80),Line_out$(80)240 DIM Code$(20000),Rel$(1000),Adr$(5000)250 CALL File("input file",1;In_file)260 CALL File("output file",2;Out_file)270 Err=0280 CALL Pass1290 IF Err THEN 300    PRINT "*** pass one errors ***"310 ELSE 320    CALL Pass2330    IF Err THEN 340       PRINT "*** pass two errors ***"350    ELSE 360       IF Out_file=0 THEN 370          PRINT "done"380       ELSE 390          IF Out_file>0 THEN 400             PRINT "writing code to tape file #";Out_file410             FIND Out_file420             WRITE @33:Code$,Rel$430          ELSE 440             PRINT "writing code to file "450             WRITE #-Out_file:Code$,Rel$460          END IF 470       END IF 480    END IF 490 END IF 500 END 1000 SUB Pass11010    PRINT "PASS 1"1020    Code$=""1030    Rel$=""1040    Adr$=""1050    CALL Pass(0)1060 END SUB 2000 SUB Pass22010    LOCAL I,J2020    PRINT "PASS 2"2030    Code$=""2040    Rel$=CHR(0)&CHR(0)2050    CALL Pass(1)2060    PRINT "symbols---"2070    I=12080    DO 2090       J=SEARCH(Adr$,"::==",I)2100    EXIT IF NOT(J)2110       I$=SEG(Adr$,I,J-I)2120       CALL Get_label(I$;Where,Rel,Err$)2130       I$=I$&CHR(ASC(Adr$,J))&" "2140       CALL Hex(Where,4;I$)2150       PRINT I$;"I_";2160       I=J+32170    LOOP 2180    PRINT 2190    PRINT "error count: ";Err2200 END SUB 3000 SUB Pass(Pr)3010    LOCAL Lx$3020    IF In_file>0 THEN 3030       FIND In_file3040    ELSE 3050       CALL "rewind",-In_file3060    END IF 3070    Nomore=03080    ON EOF (-In_file*(In_file<0)) THEN 31003090    GO TO 31403100    REM eof handler3110    Nomore=13120    PRINT "***EOF***"3130    RETURN 3140    DO 3150       IF In_file>0 THEN 3160          INPUT @33:Line_in$3170       ELSE 3180          INPUT #-In_file:Line_in$3190       END IF 3200    EXIT IF Nomore3210       Line_out$=Line_in$3220         !PRINT "J_line_in$: ";Line_in$3230       Err$=""3240       Out$=""3250       CALL Hex(LEN(Code$),4;Out$)3260       Out$=Out$&": "3270       CALL Parse(L$,O$,Ad$,Err$)3280         !PRINT "parse:";L$;";";O$;";";Ad$;";";Err$3290       IF LEN(L$) AND O$<>"=" THEN 3300          CALL Put_label(L$,LEN(Code$),1;Err$)3310       END IF 3320       IF LEN(O$) THEN 3330          CALL Op_lookup(O$;Op,Optype)3340            !PRINT "op_lookup:";O$;"=";Op;";";Optype3350          IF Op<0 THEN 3360             CALL Special_op(L$,O$,Ad$;Err$)3370          ELSE 3380             IF LEN(Ad$) AND Optype<8 THEN 3390                CALL Get_label(Ad$;V,Rel,Err$)3400             END IF 3410             IF Optype<8 THEN 3420                CALL Gen_code(Op,Optype,V,Rel,LEN(Code$);Err$)3430             ELSE 3440                CALL Gen_fpsh(Op,Ad$;Err$)  ! 8 BYTE OPERAND3450             END IF 3460          END IF 3470       END IF 3480       IF Pr THEN 3490          CALL De_tab(Line_out$)3500          Lx$="                              "3510          Lx$=REP(Out$,1,LEN(Out$))3520          PRINT Lx$;Line_out$3530          IF LEN(Err$) THEN 3540             PRINT Err$3550             Err=Err+13560          END IF 3570       END IF 3580    LOOP 3590 END SUB 4000 SUB _init4010    REM instruction formats --4020    REM 1: immediate4030    REM 2: direct4040    REM 3: extended4050    REM 4: indexed4060    REM 5: implied4070    REM 6: relative4080    REM 7: extended immediate4090    REM4100    REM opcodes are six characters followed by instruction format4110    REM4120    REM 00-074130    DATA "TEST  5NOP   5...... SFA   5LDAG,D2LDAG,X4TAP   5TPA   5"4140    REM 08-0F4150    DATA "INX   5DEX   5CLV   5SEV   5CLC   5SEC   5CLI   5SEI   5"4160    REM 10-174170    DATA "SBA   5CBA   5TAPX  5TPAX  5ADXI,I1ASPI,I1TAB   5TBA   5"4180    REM 18-1F4190    DATA "SDA   5DAA   5LDXX  5ABA   5LDAX  5LDBX  5STAX  5JMPAX 5"4200    REM 20-274210    DATA "BRA   6SDB   5BHI   6BLS   6BCC   6BCS   6BNE   6BEQ   6"4220    REM 28-2F4230    DATA "BVC   6BVS   6BPL   6BMI   6BGE   6BLT   6BGT   6BLE   6"4240    REM 30-374250    DATA "TSX   5INS   5PULA  5PULB  5DES   5TXS   5PSHA  5PSHB  5"4260    REM 38-3F4270    DATA "JMPIN 3RTS   5FPSH,D2RTI   5FPSH,X4FPSH  3WAI   5SWI   7"4280    REM 40-474290    DATA "NEGA  5FPSH,I8FPUL,D2COMA  5LSRA  5FPUL,X4RORA  5ASRA  5"4300    REM 48-4F4310    DATA "ASLA  5ROLA  5DECA  5FPUL  3INCA  5TSTA  5FDUP  5CLRA  5"4320    REM 50-574330    DATA "NEGB  5FSWP  5FADD  5COMB  5LSRB  5FSUB  5RORB  5ASRB  5"4340    REM 58-5F4350    DATA "ASLB  5ROLB  5DECB  5FMUL  5INCB  5TSTB  5FDIV  5CLRB  5"4360    REM 60-674370    DATA "NEG,X 4FNRM  5PSHRET2COM,X 4LSR,X 4RTRN  2ROR,X 4ASR,X 4"4380    REM 68-6F4390    DATA "ASL,X 4ROL,X 4DEC,X 4PSHX  5INC,X 4TST,X 4JMP,X 4CLR,X 4"4400    REM 70-774410    DATA "NEG   3STRK  5VECT  5COM   3LSR   3PULX  5ROR   3ASR   3"4420    REM 78-7F4430    DATA "ASL   3ROL   3DEC   3STAG,D2INC   3TST   3JMP   7CLR   3"4440    REM 80-874450    DATA "SUBA,I1CMPA,I1SBCA,I1STAG,X4ANDA,I1BITA,I1LDAA,I1ADDG,D2"4460    REM 88-8F4470    DATA "EORA,I1ADCA,I1ORAA,I1ADDA,I1CPX,I 7BSR   6LDS,I 7ADDG,X4"4480    REM 90-974490    DATA "SUBA,D2CMPA,D2SBCA,D2SUBG,D2ANDA,D2BITA,D2LDAA,D2STAA,D2"4500    REM 98-9F4510    DATA "EORA,D2ADCA,D2ORAA,D2ADDA,D2CPX,D 2SUBG,X4LDS,D 2STS,D 2"4520    REM A0-A74530    DATA "SUBA,X4CMPA,X4SBCA,X4INXSTX2ANDA,X4BITA,X4LDAA,X4STAA,X4"4540    REM A8-AF4550    DATA "EORA,X4ADCA,X4ORAA,X4ADDA,X4CPX,X 4JSR,X 4LDS,X 4STS,X 4"4560    REM B0-B74570    DATA "SUBA  3CMPA  3SBCA  3LDAG  3ANDA  3BITA  3LDAA  3STAA  3"4580    REM B8-BF4590    DATA "EORA  3ADCA  3ORAA  3ADDA  3CPX   3JSR   7LDS   3STS   3"4600    REM C0-C74610    DATA "SUBB,I1CMPB,I1SBCB,I1STAG  3ANDB,I1BITB,I1LDAB,I1ESC????"4620    REM C8-CF4630    DATA "EORB,I1ADCB,I1ORAB,I1ADDB,I1ADAX  5WADGX 5LDX,I 7...... "4640    REM D0-D74650    DATA "SUBB,D2CMPB,D2SBCB,D2LDAG,I7ANDB,D2BITB,D2LDAB,D2STAB,D2"4660    REM D8-DF4670    DATA "EORB,D2ADCB,D2ORAB,D2ADDB,D2SBUG  5CBUG  5LDX,D 2STX,D 2"4680    REM E0-E74690    DATA "SUBB,X4CMPB,X4SBCB,X4MOVLR 5ANDB,X4BITB,X4LDAB,X4STAB,X4"4700    REM E8-EF4710    DATA "EORB,X4ADCB,X4ORAB,X4ADDB,X4MOVRL 5WADX  7LDX,X 4STX,X 4"4720    REM F0-F74730    DATA "SUBB  3CMPB  3SBCB  3CPCH  1ANDB  3BITB  3LDAB  3STAB  3"4740    REM F8-FF4750    DATA "EORB  3ADCB  3ORAB  3ADDB  3ESC????PCH   1LDX   3STX   3"4760    REM FC00-FC074770    DATA "PSHG  5PULG  5ADDG,I7ADDG  3SUBG,I7SUBG  3CMPGX 5CMPSYM5"4780    REM FC08-FC0F4790    DATA "LDAGX 5STAGX 5...... ...... ...... ...... ...... ...... "4800    REM C700-C7074810    DATA "TGX   5TXG   5CLRGH 5IFLOAT5FIXRND5TMULT 5BUFIN 5BUFOUT5"4820    REM C708-C70F4830    DATA "SEABNK5DEVIN 5DEVOUT5...... ...... ...... ...... ...... "4840    DIM Op$(7*(256+32))4850    Op$=""4860    FOR I=1 TO 364870       READ A$4880       Op$=Op$&A$4890    NEXT I4900 END SUB 5000 SUB De_tab(L$)5010    LOCAL Lx$,P5020    DO 5030       P=POS(L$,"I_",1)5040    EXIT IF NOT(P)5050       Lx$="        "5060       Lx$=SEG(Lx$,1,9-(P-INT((P-1)/8)*8))5070       L$=REP(Lx$,P,1)5080    LOOP 5090 END SUB 10000 SUB _scan(T$)10010    LOCAL P1,P2  ! first char of token, last char+1 of token10020    P1=SEARCH(Line_in$,"!~",1)10030    IF P1 THEN   ! found a non-separator10040       P2=SEARCH(Line_in$,"-.09AZ__az",P1)10050       IF P1=P2 THEN   ! we have an identifier/constant10060          P2=SEARCH(Line_in$,"@_-//:@[^``{~",P1)10070          IF NOT(P2) THEN   ! last thing in line10080             P2=LEN(Line_in$)+110090          END IF 10100       ELSE   ! a special character10110          P2=P1+110120       END IF 10130    ELSE   !nothing left on line10140       P1=LEN(Line_in$)+110150       P2=P110160    END IF 10170    T$=SEG(Line_in$,P1,P2-P1)10180    Line_in$=SEG(Line_in$,P2,LEN(Line_in$)-P2+1)10190      !PRINT "scan=";T$10200 END SUB 11000 SUB Parse(Lab$,Opc$,Adr$,Err$)11010    LOCAL X1$,X2$11020    CALL _scan(X1$)11030    IF X1$="" OR X1$=";" THEN   ! no program line11040       Lab$=""11050       Opc$=""11060       Adr$=""11070    ELSE   ! got something: what is it?11080       CALL _scan(X2$)11090       IF X2$=":" THEN   ! got a label11100          Lab$=X1$11110          CALL _scan(Opc$)11120          CALL _scan(X1$)11130       ELSE 11140          IF X2$="=" THEN   ! an absolute assignment11150             Lab$=X1$11160             Opc$="="11170             CALL _scan(X1$)11180          ELSE 11190             Lab$=""11200             Opc$=X1$11210             X1$=X2$11220          END IF 11230       END IF 11240       IF X1$="a" OR X1$="b" OR X1$="x" THEN   ! a register name11250          Opc$=Opc$&X1$  ! add register name to opcode11260          CALL _scan(X1$)11270       END IF 11280       IF X1$="" OR X1$=";" THEN   ! no operand11290          Adr$=""11300       ELSE   ! got an address11310          Adr$=X1$11320          CALL _scan(X1$)11330          IF X1$<>"" AND X1$<>";" THEN   ! must be an addressing mo                  de11340             IF X1$<>"," THEN 11350                Err$=Err$&"comma expected; "11360             ELSE 11370                CALL _scan(X1$)11380                IF NOT(POS("abcxid",X1$,1)) THEN 11390                   Err$=Err$&"addressing mode expected; "11400                ELSE 11410                   Opc$=Opc$&","&X1$11420                END IF 11430             END IF 11440          END IF 11450       END IF 11460    END IF 11470 END SUB 12000 SUB Op_lookup(In$;Op,Otype)12010    LOCAL I,I$12020    I$="      "12030    I$=REP(In$,1,LEN(In$))12040    I=112050    DO 12060       I=POS(Op$,I$,I)12070    EXIT IF I=0 OR (I-1)/7=INT((I-1)/7)12080    LOOP 12090    IF I=0 OR NOT(LEN(In$)) THEN 12100       Op=-112110       Optype=-112120    ELSE 12130       Op=(I-1)/712140       Optype=ASC(Op$,I+6)-ASC("0")12150    END IF 12160    IF Op=>256+16 THEN   ! C700 EXTENDED OPS12170       Op=Op-256-16+50944  ! CONCATENATE C712180    ELSE 12190       IF Op=>256 THEN   ! FC00 EXTENDED OPS12200          Op=Op-256+64512  ! ADD FC BYTE12210       END IF 12220    END IF 12230 END SUB 13000 SUB Put_label(L$,Where,Rel;Err$)13010      !PRINT "define label ";L$;" at ";Where;Rel13020    IF ASC(L$,1)=>ASC("0") AND ASC(L$,1)<=ASC("9") THEN 13030       Err$=Err$&"constant used as label; "13040    ELSE 13050       LOCAL Lx$,Ly$,P,P113060       IF Rel THEN 13070          Lx$=L$&":"13080          Ly$=L$&"="13090       ELSE 13100          Lx$=L$&"="13110          Ly$=L$&":"13120       END IF 13130       P=POS(Adr$,Lx$,1)13140       IF P>1 THEN 13150          IF ASC(Adr$,P-3)<>ASC(":") AND ASC(Adr$,P-3)<>ASC("=") TH                  EN 13160             P=0  ! part of a larger label13170          END IF 13180       END IF 13190       P1=POS(Adr$,Ly$,1)13200       IF P1>1 THEN 13210          IF ASC(Adr$,P-3)<>ASC(":") AND ASC(Adr$,P-3)<>ASC("=") TH                  EN 13220             P1=013230          END IF 13240       END IF 13250       IF P1 THEN 13260          Err$=Err$&"label both rel and abs; "13270       ELSE 13280          Ly$=CHR(INT(Where/256))&CHR(Where MOD 256)13290          IF P THEN 13300             Lx$=Lx$&Ly$13310             P=POS(Adr$,Lx$,1)13320             IF NOT(P) THEN 13330                Err$=Err$&"duplicate label; "13340             END IF 13350          ELSE   ! not there yet; put it in13360             Adr$=Adr$&Lx$&Ly$13370          END IF 13380       END IF 13390    END IF 13400 END SUB 14000 SUB Get_label(L$;Where,Rel,Err$)14010    LOCAL Lx$,I14020    IF ASC(L$,1)<ASC("-") OR ASC(L$,1)>ASC("9") THEN 14030       Rel=114040       Lx$=L$&":"14050       P=POS(Adr$,Lx$,1)14060       IF P THEN 14070          Where=ASC(Adr$,P+LEN(Lx$))*256+ASC(Adr$,P+LEN(Lx$)+1)14080       ELSE 14090          Lx$=L$&"="14100          P=POS(Adr$,Lx$,1)14110          IF P THEN 14120             Rel=014130             Where=ASC(Adr$,P+LEN(Lx$))*256+ASC(Adr$,P+LEN(Lx$)+1)14140          ELSE 14150             Where=6553514160             Err$=Err$&"undefined label; "14170          END IF 14180       END IF 14190    ELSE   ! got a numeric14200       Rel=014210       Where=014220       FOR I=1+(ASC(L$,1)=ASC("-")) TO LEN(L$)14230          Where=Where*16+ASC(L$,I)-ASC("0")14240          Where=Where-7*(ASC(L$,I)=>ASC("A"))-32*(ASC(L$,I)=>ASC("a               "))14250       NEXT I14260       IF ASC(L$,1)=ASC("-") THEN 14270          Where=-Where14280       END IF 14290    END IF 14300 END SUB 15000 SUB Gen_code(Op,Optype,Adr,Rel,Here;Err$)15010      !PRINT "gen_code:";Op;";";Optype;";";Adr;";";Here15020    LOCAL Oplen15030    Oplen=1+(Op>255)15040    GOSUB Optype OF 15060,15180,15300,15420,15540,15580,15700,2300015050 END SUB 15060 REM optype 1 (immediate addressing)--------------------------15070 IF Adr<0 OR Adr>255 THEN 15080    Err$=Err$&"immediate address error; "15090 END IF 15100 IF Rel THEN 15110    Err$=Err$&"no relative immediate; "15120 END IF 15130 CALL Bin(Op,Oplen;Code$)15140 CALL Hex(Op,Oplen*2;Out$)15150 CALL Bin(Adr,1;Code$)15160 CALL Hex(Adr,2;Out$)15170 RETURN 15180 REM optype 2 (direct addressing)-----------------------------15190 IF Adr>255 OR Adr<0 THEN 15200    Err$=Err$&"direct address error; "15210 END IF 15220 IF Rel THEN 15230    Err$=Err$&"no relative direct; "15240 END IF 15250 CALL Bin(Op,Oplen;Code$)15260 CALL Hex(Op,Oplen*2;Out$)15270 CALL Bin(Adr,1;Code$)15280 CALL Hex(Adr,2;Out$)15290 RETURN 15300 REM optype 3 (extended addressing)-----------------------------15310 IF Rel THEN 15320    CALL Bin(Here+1,2;Rel$)  ! relocatable15330 END IF 15340 CALL Bin(Op,Oplen,Code$)15350 CALL Hex(Op,Oplen*2,Out$)15360 CALL Bin(Adr,2,Code$)15370 CALL Hex(Adr,4,Out$)15380 IF Rel THEN 15390    Out$=Out$&"R"15400 END IF 15410 RETURN 15420 REM optype 4 (indexed addressing)-----------------------------15430 IF Adr<0 OR Adr>255 THEN 15440    Err$=Err$&"indexed address error; "15450 END IF 15460 IF Rel THEN 15470    Err$=Err$&"no relative indexed; "15480 END IF 15490 CALL Bin(Op,Oplen,Code$)15500 CALL Hex(Op,Oplen*2,Out$)15510 CALL Bin(Adr,1,Code$)15520 CALL Hex(Adr,2,Out$)15530 RETURN 15540 REM optype 5 (implied addressing)-----------------------------15550 CALL Bin(Op,Oplen,Code$)15560 CALL Hex(Op,Oplen*2,Out$)15570 RETURN 15580 REM optype 6 (relative addressing)----------------------------15590 IF Adr-Here>129 OR Adr-Here<-126 THEN 15600    Err$=Err$&"relative address error; "15610 END IF 15620 IF NOT(Rel) THEN 15630    Err$=Err$&"no absolute relative; "15640 END IF 15650 CALL Bin(Op,Oplen,Code$)15660 CALL Hex(Op,Oplen*2,Out$)15670 CALL Bin(Adr-Here-2,1,Code$)15680 CALL Hex(Adr-Here-2,2,Out$)15690 RETURN 15700 REM optype 7 (extended immediate)-----------------------------15710 IF Rel THEN 15720    CALL Bin(Here+1,2,Rel$)15730 END IF 15740 CALL Bin(Op,Oplen,Code$)15750 CALL Hex(Op,Oplen*2,Out$)15760 CALL Bin(Adr,2,Code$)15770 CALL Hex(Adr,4,Out$)15780 IF Rel THEN 15790    Out$=Out$&"R"15800 END IF 15810 RETURN 16000 SUB Gen_fpsh(Op,Flt$;Err$)16010    LOCAL I,F16020    CALL Bin(Op,1;Code$)16030    CALL Hex(Op,2;Out$)16040    IF LEN(Flt$)=16 OR (LEN(Flt$)=17 AND ASC(Flt$,1)=ASC("0")) THEN             16050       FOR I=1+(LEN(Flt$)=17) TO LEN(Flt$)-1 STEP 216060          F=ASC(Flt$,I)-ASC("0")-7*(ASC(Flt$,I)=>ASC("A"))16070          F=F*16+ASC(Flt$,I+1)-ASC("0")-7*(ASC(Flt$,I+1)=>ASC("A"))16080          CALL Bin(F,1,Code$)16090       NEXT I16100       Out$=Out$&" "&Flt$16110    ELSE 16120       Err$=Err$&"bad float constant; "16130       CALL Bin(-1,8;Code$)16140       Out$=Out$&"FFFFFFFFFFFFFFFF"16150    END IF 16160 END SUB 17000 SUB Hex(Num,Dig;Out$)17010    LOCAL Temp17020    IF Dig=0 THEN 17030       IF Out$<>"" THEN 17040          Out$=Out$&" "17050       END IF 17060    ELSE 17070       Temp=Num MOD 1617080       CALL Hex(INT(Num/16),Dig-1;Out$)17090       Out$=Out$&CHR(Temp+48+7*(Temp>9))17100    END IF 17110 END SUB 18000 SUB Bin(Num,Dig;Out$)18010    LOCAL Temp18020    IF Dig>0 THEN 18030       Temp=Num MOD 25618040       CALL Bin(INT(Num/256),Dig-1;Out$)18050       Out$=Out$&CHR(Temp)18060    END IF 18070 END SUB 19000 SUB Special_op(L$,Op$,Ad$,Err$)19010    IF Op$="=" THEN 19020       CALL Get_label(Ad$;Adr,Rel,Err$)19030       IF Rel THEN 19040          Err$=Err$&"absolute relocating; "19050       ELSE 19060          CALL Put_label(L$,Adr,0;Err$)19070          CALL Hex(Adr,4;Out$)19080       END IF 19090    ELSE   ! must be either a .byte or .word19100       CALL Get_label(Ad$;Adr,Rel,Err$)19110       IF Rel THEN 19120          Err$=Err$&"relocating absolute; "19130       ELSE 19140          IF Op$=".byte" THEN 19150             CALL Bin(Adr,1;Code$)19160             CALL Hex(Adr,2;Out$)19170          ELSE 19180             IF Op$=".word" THEN 19190                CALL Bin(Adr,2;Code$)19200                CALL Hex(Adr,4;Out$)19210             ELSE 19220                Err$=Err$&"undefined opcode; "19230             END IF 19240          END IF 19250       END IF 19260    END IF 19270 END SUB 20000 SUB File(I$,N,Lun)20010    LOCAL X$20020    DO 20030       PRINT I$;": ";20040       INPUT X$20050    EXIT IF LEN(X$)20060    LOOP 20070    IF SEARCH(X$,"@_/:~",1)>0 THEN   ! disk file20080       Lun=-N20090       OPEN X$;N,"f",A$20100       PRINT I$;" is disk file ";X$20110    ELSE 20120       Lun=VAL(X$)20130       IF Lun THEN 20140          PRINT I$;" is tape file #";Lun20150       ELSE 20160          PRINT I$;" is null file"20170       END IF 20180    END IF 20190 END SUB 