;	6.0 MINIBUG REV.4 PROGRAM - Modified for Tektronix 4052A/4054A ;   Modified from pdf source by Monty McGraw - Oct 6 2018;;     from LISTING in MikbugEN100.pdf at;     http://www.swtpc.com/mholley/MP_A/MIKBUG_Index.htm;	NAM MINIB; 	MINI-BUG; 	COPYWRITE 1973, MOTOROLA IMC; 	REV 004 (USED WITH MIKBUG);;   location of Motorola ACIA hardware in Tektronix 4052/4054ACIACS= 0FF44	;ACIA CONTROL/STATUS (FF44)ACIADA= 0FF45	;					 (FF45)BEGA=   0A002	; BEGINING ADDR PRINT/PUNCH;		NOPENDA=   0A004	; ENDING ADDR PRINT/PUNCHENDA_1=	0A005	; aka ENDA+1;;   Reworked source for Tektronix 4052A or 4054A to be loaded;   with CALL "EXEC",Code$,Rel$ where first E in EXEC is Control-E;	and Code$ is 8-bit binary and Rel$ contains CHR(20)&CHR(0);;	The Code assembled by the Tek 4052A assembler is relocatable;   but requires the Tek assembler Code$ and Rel$ together;   for execution with CALL "EXEC";BEGIN:	JMP 	START	; JUMP TO START CODE; INPUT ONE CHAR INTO A-REGISTERINCH:  	LDAA	ACIACS		ASRA		BCC		INCH 	; RECEIVE NOT READY		LDAA	ACIADA 	; INPUT CHARACTER		ANDA	7F,i    ; RESET PARITY BIT		CMPA	7F,i		BEQ		INCH	; RUBOUT - IGNORE		JMP 	OUTCH	; ECHO CHAR; INPUT HEX CHARINHEX:  BSR 	INCH		CMPA 	30,i		BMI		C1		; NOT HEX		CMPA	39,i		BLE		IN1HG		CMPA	41,i		BMI		C1		; NOT HEX		CMPA	46,i		BGT 	C1		; NOT HEX		SUBA	07,iIN1HG:  RTSLOAD:   LDAA	0D1,i   ; TURN READER ON		;STA A	ACIACS	; DON'T CHANGE THE CS REG		NOP				; REPLACE WITH THREE NOPs		NOP		NOP		LDAA	00,i      ; use NULL instead		BSR		OUTCHLOAD3:  BSR 	INCH		CMPA 	53,i		BNE 	LOAD3 	; 1ST CHAR NOT (S)		BSR 	INCH 	; READ CHAR		CMPA 	39,i		BEQ 	LOAD21		CMPA 	31,i		BNE		LOAD3	; 2ND CHAR NOT (1)		CLR		CKSM	; ZERO CHECKSUM		BSR		BYTE	; READ BYTE		SUBA	02,i		STAA	BYTECT	; BYTE COUNT; BUILD ADDRESS		BSR		BADDRLOAD11: BSR		BYTE		DEC		BYTECT		BEQ		LOAD15	; ZERO BYTE COUNT		STAA 0,x		INX		BRA		LOAD11LOAD15: INC		CKSM		BEQ		LOAD3LOAD19: LDAA	3F,i    ; PRINT QUESTION MARK		BSR		OUTCHLOAD21: LDAA	0B1,i   ; TURN READER OFF	   ;STAA	ACIACS  ; DON'T CHANGE THE CS REG	    NOP				; REPLACE WITH NOPs	    NOP	    NOP	    LDAA	00,i    ; use NULL instead	    BSR		OUTCHC1:     JMP		CONTRL; BUILD ADDRESSBADDR:  BSR		BYTE	; READ 2 FRAMES		STAA    XHI		BSR		BYTE		STAA    XLOW		LDX		XHI		; (X) ADDRESS WE BUILT		RTS; INPUT BYTE (TWO FRAMES)BYTE:   BSR		INHEX	; GET HEX CHAR		ASLA		ASLA		ASLA		ASLA		TAB		BSR		INHEX		ANDA	0F,i    ; MASK TO 4 BITS		ABA		TAB		ADDB	CKSM		STAB	CKSM		RTS;CHANGE MEMORY (M AAAA DD NN)CHANGE: BSR		BADDR	; BUILD ADDRESS		BSR		OUTS	; PRINT SPACE		BSR		OUT2HS		BSR		BYTE		DEX		STAA 0,x		CMPA 0,x		BNE 	LOAD19	; MEMORY DID NOT CHANGE		BRA		CONTRLOUTHL:  LSRA			; OUT HEX LEFT BCD DIGIT		LSRA		LSRA		LSRAOUTHR:  ANDA	0F,i    ; OUT HEX RIGHT BCD DIGIT		ADDA	30,i		CMPA	39,i		BLS		OUTCH		ADDA	07,i		; OUTPUT ONE CHAROUTCH:  PSHB			; SAVE B-REGOUTC1:  LDAB	ACIACS		ASRB		ASRB		BCC		OUTC1	; XMIT NOT READY		STAA	ACIADA	; OUTPUT CHARACTER		PULB		 	; RESTORE B-REG		RTSOUT2H:  LDAA 0,x        ; OUTPUT 2 HEX CHAR		BSR		OUTHL	; OUT LEFT HEX CHAR		LDAA 0,x		BSR		OUTHR	; OUT RIGHT HEX CHAR		INX		RTSOUT2HS: BSR		OUT2H	; OUTPUT 2 HEX CHAR + SPACEOUTS:   LDAA	20,i    ; SPACE		BRA		OUTCH	; (BSR & RTS); PRINT CONTENTS OF STACK.PRINT:  TSX		STX		SP		; SAVE STACK POINTER		LDAB	09,iPRINT2: BSR		OUT2HS	; OUT 2 HEX & SPACE		DECB		BNE PRINT2; ENTER POWER ON SEQUENCE; INZ ACIASTART:  LDAA	0B1	    ; DON'T CHANGE UART PARAMETERS;		STAA	ACIACS	; REPLACE WITH THREE NOPs		NOP				; REPLACE WITH THREE NOPs		NOP		NOPCONTRL: LDS		STACK	; SET STACK POINTER		LDAA	0D,i	; CARRIAGE RETURN		BSR		OUTCH		LDAA	3E,i	; ADD > FOR PROMPT insead of LF		BSR		OUTCH		JSR		INCH	; READ CHARACTER		TAB		BSR		OUTS	; PRINT SPACE		CMPB	4C,i		BEQ		PUNCH	; "L"=LIST HEX from A002 > A004		JMP		LOAD		CMPB	4D,i		BEQ		CHANGE	; "C"=Change memory		CMPB	50,i		BEQ		PRINT	; "P"=Print STACK		CMPB	51,i    		BEQ		RETURN  ; "Q"= Quit and return to basic		CMPB	47,i		BNE		CONTRL		RTI		        ; GORETURN: RTS;;  added routine PUNCH from MIKBUG: CHANGD TO DUMP;; PRINT DATA POINTED AT BY X-REGPDATA2:	BSR OUTCH		INXPDATA1:	LDAA 0,x		CMPA 4,i		BNE PDATA2		RTS 			; STOP ON EOT;; PUNCH DUMP (modified for Dump from BEGA thru ENDA; PUNCH FROM BEGA THRU ENDING ADDRESS (ENDA);PUNCH:	LDAA 00,i		; just send a NULL		JSR OUTCH 		; OUT CHAR		LDX BEGA		STX TW 			; TEMP BEGINING ADDRESSPUN11:	LDAA ENDA_1		;		SUBA TW_1		LDAB ENDA		SBCB TW		BNE PUN22		CMPA 10,i		BCS PUN23PUN22:	LDAA 0F,iPUN23:	ADDA 4,i		STAA MCONT		; FRAME COUNT THIS RECORD		SUBA 3,i		STAA TEMP		; BYTE COUNT THIS RECORD; PUNCH C/R,L/F,NULL,S,1  - we don't need this;		LDX #MTAPE1;		JSR PDATA1;		CLR B ZERO CHECKSUM; PUNCH FRAME COUNT       - we don't need this either;		LDX MCONT;		BSR PUNT2 		; output 2 HEX CHAR; PUNCH ADDRESS DON'T NEED		LDX TW		BSR PUNT2		BSR PUNT2; PUNCH DATA		LDX TWPUN32:	BSR PUNT2 		;PUNCH ONE BYTE (2 FRAMES)		DEC TEMP		; DEC BYTE COUNT		BNE PUN32		STX TW		COMB		PSHB		TSX		JSR OUT2H		; OUTPUT 2 Hex Characters and RTS		PULB			; RESTORE STACK		LDX TW		DEX		CPX ENDA		BNE PUN11		JMP CONTRL		; JMP TO CONTRL;; PUNCH 2 HEX CHAR UPDATE CHECKSUMPUNT2:	ADDB 0,x    	; UPDATE CHECKSUM		JMP OUT2H 		; OUTPUT TWO HEX CHAR AND RTS;; RESERVE 46 (DECIMAL) BYTES BEFORE STACK FOR MIKBUG		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOP		NOPSTACK:	NOP ; STACK POINTER; REGISTERS FOR GO		NOP	; CONDITION CODES		NOP	; B ACCUMULATOR		NOP	; A		NOP	; X-HIGH		NOP	; X-LOW		NOP	; P-HIGH		NOP	; P-LOWSP:		NOP ; S-HIGH		NOP	; S-LOW; END REGISTERS FOR GOCKSM:	NOP	; CHECKSUMBYTECT:	NOP ; BYTE COUNTXHI:	NOP	; X-HIGHXLOW:	NOP	; X-LOW;;; MIKBUG added variables for dumping memory to serial;TEMP:	NOP	; CHAR COUNT (INADD)TW:		NOP	; TEMP/TW_1:	NOP ; aka TW+1MCONT:	NOP	; TEMPXTEMP:	NOP	; X-REG TEMP STORAGE		NOP		