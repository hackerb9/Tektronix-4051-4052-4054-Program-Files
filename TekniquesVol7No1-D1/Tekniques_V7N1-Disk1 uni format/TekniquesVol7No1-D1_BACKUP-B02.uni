100 REM --------------- File $BACKUP.B02 ---------------110 REM ##### Append in the file manipulation routines #####120 N=MEMORY130 APPEND "@SYSLIB/BACKUP.B03";10000,0140 REM ##### Prepare the disk for use #####150 PRINT "


"160 PRINT "   Insert the disk you would like to backup in drive ";D170 PRINT "     and press RETURN: ";180 INPUT Z$190 CALL "MOUNT",D,Z$200 KILL "$BACKUP.DIR"210 KILL "$BACKUP.DAT"220 REM ##### Ask for the backup tape #####230 PRINT "
   Insert your disk backup tape (WARNING: any data on"240 PRINT "     your tape will be destroyed).  When you are ready"250 PRINT "     to continue, press RETURN: ";260 INPUT Z$270 FIND 0280 REM ##### Initialize for the directory #####290 C0=1300 C1=0310 C2=0320 A$=""330 REM ##### Get the directory #####340 WBYTE @95,63,32:74,D,-36350 WBYTE @64:360 RBYTE N370 RBYTE N380 FOR I=1 TO N-2390 RBYTE N400 NEXT I410 RBYTE N420 IF N<0 THEN 820430 RBYTE N440 RBYTE N450 REM ##### Get attributes #####460 GOSUB 7000470 FOR I=1 TO 12480 RBYTE N490 NEXT I500 REM ##### Get allocated length #####510 GOSUB 8000520 C$=STR(N0)530 C$=REP("#",1,1)540 REM ##### Get used length #####550 GOSUB 8000560 D$=STR(N0)570 D$=REP("%",1,1)580 REM ##### Get record length #####590 GOSUB 8000600 N0=INT(N0/256)610 E$=STR(N0)620 E$=REP("&",1,1)630 RBYTE N640 REM ##### Get filename #####650 F$=""660 RBYTE N670 IF N=36 THEN 720680 Z$=CHR(N)690 F$=F$&Z$700 GO TO 660710 REM ##### Concatenate onto directory #####720 IF D$="%0" THEN 800730 A$=A$&F$740 A$=A$&B$750 A$=A$&C$760 A$=A$&D$770 A$=A$&E$780 A$=A$&M$790 C1=C1+1800 GO TO 410810 REM ##### Directory complete: reset GPIB #####820 WBYTE @95,63:830 REM ##### Edit required? #####840 PRINT "

   Do you need to edit the directory (Y/N_)? ";850 INPUT Z$860 IF Z$<>"Y" THEN 5000870 REM ##### Edit menu subroutine #####880 SET KEY 890 PRINT "

   The following functions are available:"900 PRINT "	1   Directory listing"910 PRINT "	2   Directory listing interrupt"920 PRINT "	3   Delete directory item"930 PRINT "	4   Modify directory item"940 PRINT "	5   Edit complete"950 PRINT "
   Please make your selection via the user definable keys."960 RETURN 990 REM ##### Directory listing subroutine #####1000 PRINT "*DIRECTORY
"1010 P0=11020 FOR I=1 TO C11030 N=POS(A$,"$",P0)1040 IF NOT(N) THEN 10701050 Z$=SEG(A$,P0,N-P0)1060 P0=POS(A$,M$,N)+11070 PRINT "	";Z$1080 NEXT I1090 PRINT "
   Press RETURN to continue: ";1100 INPUT Z$1110 GO TO 8901990 REM ##### Directory listing interrupt subroutine #####2000 I=C1+12010 RETURN 2990 REM ##### Delete item subroutine #####3000 SET NOKEY 3010 PRINT "*DELETE
"3020 PRINT "   (To terminate DELETE mode, press RETURN when prompted ";3030 PRINT "for item.)
"3040 PRINT "   Which item? ";3050 INPUT Z$3060 IF NOT(LEN(Z$)) THEN 32403070 REM ##### Name in directory? If so, get the position #####3080 P0=13090 GOSUB 45003100 IF NOT(P0) THEN 30403110 REM ##### Verify name #####3120 PRINT "   You want to delete ";B$;" (Y/N_)? ";3130 INPUT B$3140 IF B$="Y" THEN 31903150 REM ##### Wrong match: find another #####3160 P0=N3170 GO TO 30903180 REM ##### Delete entry from directory #####3190 C1=C1-13200 N=POS(A$,M$,P0)3210 A$=REP("",P0,N-P0+1)3220 PRINT "     ***DELETED***"3230 GO TO 30403240 GO TO 8803990 REM ##### Modify item subroutine #####4000 SET NOKEY 4010 PRINT "*MODIFY
"4020 PRINT "   (To terminate MODIFY mode, press RETURN when prompted ";4030 PRINT "for item.)
"4040 PRINT "   Which item? ";4050 INPUT Z$4060 IF NOT(LEN(Z$)) THEN 43204070 REM ##### Name in directory? If so, get the position #####4080 P0=14090 GOSUB 45004100 IF NOT(P0) THEN 40404110 REM ##### Verify name #####4120 PRINT "   You want to modify ";B$;" (Y/N_)? ";4130 INPUT B$4140 IF B$="Y" THEN 41904150 REM ##### Wrong match: find another #####4160 P0=N4170 GO TO 40904180 REM ##### Modify it #####4190 PRINT "     Enter the correct name: ";4200 INPUT Z$4210 IF LEN(Z$) THEN 42404220 PRINT "     ***Invalid input***"4230 GO TO 41904240 B$="@"&Z$4250 CALL "FILE",D,B$,B$4260 IF LEN(B$) THEN 42904270 PRINT "     ***No such file***"4280 GO TO 41904290 A$=REP(Z$,P0,N-P0)4300 PRINT "     ***MODIFIED***"4310 GO TO 40404320 GO TO 8804490 REM ##### Get positions and name subroutine #####4500 P0=POS(A$,Z$,P0)4510 IF P0 THEN 45504520 PRINT "     ***";Z$;" not found***"4530 GO TO 46404540 REM ##### Found a match: get the full name #####4550 P0=P0-14560 IF NOT(P0) THEN 45904570 B$=SEG(A$,P0,1)4580 IF B$<>M$ THEN 45504590 P0=P0+14600 N=POS(A$,"$",P0)4610 IF N THEN 46304620 N=POS(A$,M$,P0)4630 B$=SEG(A$,P0,N-P0)4640 RETURN 4990 REM ##### Save the directory on disk #####5000 SET NOKEY 5010 A$=REP("",LEN(A$),1)5020 N=LEN(A$)+15030 KILL "$BACKUP.DIR"5040 CREATE "$BACKUP.DIR","A";N+0,05050 OPEN "$BACKUP.DIR";1,"F",Z$5060 PRINT #1:A$5070 CALL "REWIND",15080 REM ##### Allocate a directory file on tape #####5090 FIND 05100 MARK 1,100005110 REM ##### Create and open the alphabet file #####5120 KILL "$BACKUP.DAT"5130 CREATE "$BACKUP.DAT";256,05140 WBYTE @95,63,32:99,D,2,0,0,0,0,0,0,0,0,05150 WBYTE 83,89,83,76,73,66,475160 WBYTE 66,65,67,75,85,80,46,68,65,84,-365170 WBYTE @64:5180 RBYTE N5190 IF N=>0 THEN 51805200 WBYTE @95,63:5210 REM ##### Write the alphabet to the file #####5220 WBYTE @32:130,2,0,0,0,-256,7,0,1,05230 FOR I=0 TO 2555240 WBYTE I5250 NEXT I5260 WBYTE @95,63:5270 REM ##### Close the alphabet file #####5280 WBYTE @32:100,2,255,255,255,255,-2565290 WBYTE @95,63:5300 REM ##### Read the alphabet back into a string #####5310 OPEN "$BACKUP.DAT";2,"R",Z$5320 READ #2:T$5330 CLOSE 25340 REM ##### Prepare for backup #####5350 PAGE 5360 PRINT @32,26:35370 F1=102405380 F=25390 IF NOT(C1) THEN 57205400 PRINT "Archived files --"5410 REM ##### Top of the backup loop: get a directory item #####5420 FOR I=1 TO C15430 INPUT #1:A$5440 REM ##### Break out the appropriate parameters #####5450 N=POS(A$,"$",1)5460 B$=SEG(A$,1,N-1)5470 B$="@"&B$5480 C$=SEG(A$,N+1,1)5490 N=POS(A$,"%",1)5500 A$=REP("",1,N)5510 REM ##### How large? #####5520 U=VAL(A$) MAX 7685530 REM ##### Don't forget the binary header! #####5540 U=U+4*INT(U/252)5550 REM ##### Will it fit? #####5560 F1=F1+256*(INT((U+266)/256)+1)5570 IF F1<250000 THEN 56205580 REM ##### No fit: process end of volume #####5590 GOSUB 60005600 GO TO 55605610 REM ##### Fits: allocate space on the tape #####5620 PRINT "	";B$5630 FIND F5640 MARK 1,U+2675650 FIND F5660 F=F+15670 REM ##### Prepare for file copy and do it #####5680 E=05690 GOSUB 100005700 NEXT I5710 REM ##### Set done flag and process end of volume #####5720 C2=15730 GOSUB 60005740 REM ##### That's all, folks! #####5750 COPY 5760 PRINT @32,26:05770 PRINT "


   Disk backup completed."5780 CLOSE 5790 END 5990 REM ##### End of volume processing subroutine #####6000 FIND 16010 REM ##### Write the tape directory #####6020 PRINT @33:"***Disk Backup Tape***"6030 CALL "REWIND",16040 IF C0=1 THEN 61006050 REM ##### Skip entries if not first volume #####6060 FOR I1=1 TO C0-16070 INPUT #1:Z$6080 NEXT I16090 REM ##### Copy appropriate items to tape #####6100 FOR I1=C0 TO I-16110 INPUT #1:Z$6120 PRINT @33:Z$6130 NEXT I16140 REM ##### Re-initialize for a new volume #####6150 FIND 06160 C0=I16170 F=26180 F1=102406190 IF C2 THEN 63006200 REM ##### Not final volume: ask for another tape #####6210 INPUT #1:Z$6220 COPY 6230 PAGE 6240 PRINT "

 The end of the tape has been reached.  Please insert"6250 PRINT "   another tape and press RETURN to continue: ";6260 INPUT Z$6270 REM ##### Allocate a directory file on tape #####6280 FIND 06290 MARK 1,100006300 RETURN 6990 REM ##### Attributes subroutine #####7000 DATA "AHB","RU","SC","MN"7010 RESTORE 70007020 B$=""7030 FOR I1=4 TO 1 STEP -17040 N0=INT(N/2^I1)7050 READ C$7060 C$=SEG(C$,N0+1-2*(I1=4),1)7070 B$=B$&C$7080 N=N-N0*2^I17090 NEXT I17100 B$="$"&B$7110 RETURN 7990 REM ##### Four-byte to decimal subroutine #####8000 N0=08010 FOR I1=3 TO 0 STEP -18020 RBYTE N8030 N0=N0+N*256^I18040 NEXT I18050 RETURN 10000 REM ##### Target line for append #####